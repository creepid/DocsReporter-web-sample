<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd http://www.springframework.org/schema/jdbc 
                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">


    <tx:annotation-driven />
    <context:component-scan base-package="by.creepid.docgeneration.dao" />

    <beans profile="dev">

        <bean id="transactionManager"
              class="org.springframework.orm.hibernate3.HibernateTransactionManager">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

        <jdbc:embedded-database id="dataSource" type="H2">
            <jdbc:script location="classpath:/DDL/schema.sql" />
            <jdbc:script location="classpath:/DDL/data.sql" />
        </jdbc:embedded-database>

        <bean id="sessionFactory"
              class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
              p:dataSource-ref="dataSource" depends-on="hibernateProperties">
            <property name="packagesToScan" value="by.creepid.docgeneration.dao.entity" />
            <property name="hibernateProperties">
                <ref local="hibernateProperties" />
            </property>
        </bean>

        <bean id="hibernateProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="properties">
                <props>
                    <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                    <prop key="hibernate.max_fetch_depth">3</prop>
                    <prop key="hibernate.jdbc.fetch_size">50</prop>
                    <prop key="hibernate.jdbc.batch_size">10</prop>
                    <prop key="hibernate.show_sql">true</prop>
                </props>
            </property>
        </bean>

    </beans>

    <beans profile="prod">

        <bean id="transactionManager"
              class="org.springframework.orm.hibernate3.HibernateTransactionManager">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

        <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
              destroy-method="close">
            <property name="driverClass">
                <value>com.mysql.jdbc.Driver</value>
            </property>
            <property name="jdbcUrl">
                <value>jdbc:mysql://localhost:3306/creepid</value>
            </property>
            <property name="user">
                <value>user</value>
            </property>
            <property name="password">
                <value>password</value>
            </property>
                        
            <!-- Pool properties -->
            <!-- Determines how many connections at a time c3p0 will try to acquire 
        				when the pool is exhausted default - 3 -->
            <property name="acquireIncrement" value="3" />

            <!-- Default: 30 Defines how many times c3p0 will try to acquire a new 
        				Connection from the database before giving up. If this value is less than 
        				or equal to zero, c3p0 will keep trying to fetch a Connection indefinitely. -->
            <property name="acquireRetryAttempts" value="10" />
            <!-- milliseconds. time c3p0 will wait between acquire attempts -->
            <property name="acquireRetryDelay" value="4500" />

            <!-- autoCommitOnClose Default: false -->
            <property name="autoCommitOnClose" value="false" />

            <!-- Unreasonable values of initialPoolSize will be ignored, and minPoolSize 
        				will be used instead. minPoolSize <= maxPoolSize. -->
            <property name="initialPoolSize" value="3" />

            <!-- Default: 15 Maximum number of Connections a pool will maintain at 
        				any given time. -->
            <property name="maxPoolSize" value="11" />
            <!-- Default: 3 Minimum number of Connections a pool will maintain at 
        				any given time. -->
            <property name="minPoolSize" value="3" />

            <!-- Default: 0 Seconds a Connection can remain pooled but unused before 
        				being discarded. Zero means idle connections never expire -->
            <property name="maxIdleTime" value="60" /> <!-- 3600: 1 hour -->

            <!-- Default: 0 Seconds, effectively a time to live. A Connection older 
        				than maxConnectionAge will be destroyed and purged from the pool. This differs 
        				from maxIdleTime in that it refers to absolute age. Even a Connection which 
        				has not been much idle will be purged from the pool if it exceeds maxConnectionAge. 
        				Zero means no maximum absolute age is enforced. -->
            <property name="maxConnectionAge" value="120" /> <!-- 2hour -->

            <!-- maxIdleTimeExcessConnections is about minimizing the number of Connections 
        				held by c3p0 pools when the pool is not under load. By default, c3p0 pools 
        				grow under load, but only shrink if Connections fail a Connection test or 
        				are expired away via the parameters described above. Some users want their 
        				pools to quickly release unnecessary Connections after a spike in usage that 
        				forces a large pool size. You can achieve this by setting maxIdleTimeExcessConnections 
        				to a value much shorter than maxIdleTime, forcing Connections beyond your 
        				set minimum size to be released if they sit idle for more than a short period 
        				of time. -->
            <property name="maxIdleTimeExcessConnections" value="600" /> <!-- 10 minutes -->

            <!-- <property name="maxStatements" value="50" /> Use only if statement 
        				caching is used -->
            <property name="preferredTestQuery" value="select 1 from DUAL" />

            <!-- Most convenient way to speed up Connection testing is to define the 
        				parameter automaticTestTable If provided, c3p0 will create an empty table 
        				of the specified name, and use queries against that table to test the Connection. 
        				If automaticTestTable is provided, c3p0 will generate its own test query, 
        				therefore any preferredTestQuery set will be ignored. You should not work 
        				with the named table after c3p0 creates it; it should be strictly for c3p0's 
        				use in testing your Connection <property name="automaticTestTable" value 
        				="connectionTestTable"/> -->

            <!-- idleConnectionTestPeriod Default: 0 If this is a number greater than 
        				0, c3p0 will test all idle, pooled but unchecked-out connections, every this 
        				number of seconds. -->
            <!-- Test the idle connections every 3 minutes (180) -->
            <property name="idleConnectionTestPeriod" value="60" />

            <!-- testConnectionOnCheckin Default: false If true, an operation will 
        				be performed asynchronously at every connection check-in to verify that the 
        				connection is valid. Use in combination with idleConnectionTestPeriod for 
        				quite reliable, always asynchronous Connection testing -->
            <property name="testConnectionOnCheckin" value="true" />

            <!-- testConnectionOnCheckout Default: false Use only if necessary. Expensive. 
        				If true, an operation will be performed at every connection checkout to verify 
        				that the connection is valid. -->
            <property name="testConnectionOnCheckout" value="false" />

            <!-- <property name="loginTimeout" value="30" /> -->

            <property name="connectionCustomizerClassName" value="by.topby.docgeneration.dao.pool.ConnectionPoolListener" />
                        
        </bean>

        <bean id="sessionFactory"
              class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
              p:dataSource-ref="dataSource" depends-on="hibernateProperties">
            <property name="packagesToScan" value="by.creepid.docgeneration.dao.entity" />
            <property name="hibernateProperties">
                <ref local="hibernateProperties" />
            </property>
        </bean>

        <bean id="hibernateProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="properties">
                <props>
                    <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                    <prop key="hibernate.max_fetch_depth">3</prop>
                    <prop key="hibernate.jdbc.fetch_size">50</prop>
                    <prop key="hibernate.jdbc.batch_size">10</prop>
                    <prop key="hibernate.show_sql">false</prop>
                    
                    <!-- configuration pool via c3p0 -->
                    <prop key="hibernate.connection.provider_class">org.hibernate.connection.C3P0ConnectionProvider
                    </prop>

                    <!-- Maximum idle time for a connection (in seconds) -->
                    <prop key="hibernate.c3p0.timeout">2</prop>
                    <!-- Idle time before a c3p0 pooled connection is validated (in seconds) -->
                    <prop key="hibernate.c3p0.idle_test_period">2</prop>
                </props>
            </property>
        </bean>

    </beans>



</beans>
